package bjtu.jsp;

import java.io.*;
import java.nio.charset.StandardCharsets;

import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;

public class JspParser {
	final static private int PLATE_STATE = 0;
	final static private int JAVA_STATE = 1;
	final static private int OUT_STATE = 2;
	
	public static String parse(String code, String clsName, String reqName, String resName) {
		String outStmt = resName + ".getWriter().print(";
		StringBuilder res = new StringBuilder();
		code = "   " + code + "   ";			// boundary protection
		StringBuilder buffer = new StringBuilder();
		int flag = 0;
		int quote = 0;
		for (int i = 3; i < code.length() - 3; ++i) {
			char ch = code.charAt(i);

			if (quote % 2 == 0 && ch == '<' && code.charAt(i + 1) == '%') {
				if (code.charAt(i + 2) == '=') {
					flag = OUT_STATE;
					++i;
				} else {
					flag = JAVA_STATE;
				}
				res.append(outStmt + "\"" + buffer + "\");");
				res.append('\n');
				buffer.delete(0, buffer.length());
				++i;
			} else if (quote % 2 == 0 && ch == '%' && code.charAt(i + 1) == '>') {
				if (flag == JAVA_STATE) {
					res.append(buffer);
					res.append('\n');
				} else if (flag == OUT_STATE) {
					res.append(outStmt + buffer + ");");
					res.append('\n');
				}
				buffer.delete(0, buffer.length());
				flag = PLATE_STATE;
				++i;
			} else {
				if (flag == PLATE_STATE) {
					if (ch == '\"' || ch == '\\')
						buffer.append('\\');
				} else if (flag == JAVA_STATE) {
					if (ch == '\"')
						++quote;
				} else if (flag == OUT_STATE) {
					if (ch == '\"')
						++quote;
				}
				if (ch == '\n' && flag == PLATE_STATE)
					buffer.append("\\n\");\n" + outStmt + "\"");
				else if (ch == '\n' && flag == OUT_STATE)
					buffer.append(" ");
				else
					buffer.append(ch);
			}
		}
		res.append(outStmt + "\"" + buffer + "\");\n");
		
		return String.format(JAVA_TEMPLETE, clsName, reqName, resName, res.toString());
	}
	
	final private static String JAVA_TEMPLETE = ""
			+ "// Automatically Generated By godot\n"
			+ "import javax.servlet.*;\n"
			+ "public class %s implements Servlet {\n"
			+ "  public void service(ServletRequest %s, ServletResponse %s) {\n%s}\n"
			+ "  public void destroy() {}\n"
			+ "  public void ServletConfig getServletConfig() {return null;}\n"
			+ "  public String getServletInfo() {return null;}\n"
			+ "  public void init(ServletConfig conf) throws ServletException {}\n"
			+ "}\n";
}
